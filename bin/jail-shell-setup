#!/bin/sh
#
# Copyright (C) 2017 Ruilin Peng (Nick) <pymumu@gmail.com>
#

JAIL_DIR=
JAIL_ROOT_DIR=
CONF_PATH=/etc/jail-shell/jail-config
CMD_CONF=/etc/jail-shell/cmd_config
JAIL_SHELL_HOME=/usr/local/jail-shell
JAIL_VAR_DIR=/var/local/jail-shell
COMMAND_PATH=$JAIL_VAR_DIR/command
JAIL_COMMAND_PATH=
JAIL_COMMAND_LIST_FILE="command.list"
JAIL_CMD=/usr/bin/jail-cmd
ELF_FILE_LIST="`mktemp`"
JAIL_SHELL_CONF=/etc/jail-shell/jail-shell.conf

showhelp()
{
	echo "Usage: jail-shell-setup [OPTION]"
	echo "Options:"
	echo "  --list                    list jail names."
	echo "  --install [name | all]    install jail-shell from config file."
	echo "  --remove [name]           remove a jail-shell."
	echo "  --clean [name | all]      cleanup a jail-shell."
	echo "  --user [name]             mount user, this paramter must before --mount."
	echo "  --mount [name]            mount directory to a jail-shell."
	echo "  -h, --help                show this help message."
}

create_dir()
{
	local CREATE_DIR="$1"
	local MODE="$2"
	local OWNER="$3"

	if [ $# -ne 3 ]; then
		return 1
	fi

	CHMOD_DIR="$CREATE_DIR"
	CHECK_DIR="`dirname $CREATE_DIR`"
	while [ ! -d "$CHECK_DIR" ]
	do
		CHMOD_DIR="$CHECK_DIR"
		CHECK_DIR="`dirname $CHECK_DIR`"
	done

	mkdir -p  $CREATE_DIR
	if [ $? -ne 0 ]; then
		return 1
	fi
	chmod $MODE $CHMOD_DIR -R
	chown $OWNER $CHMOD_DIR -R
	if [ $? -ne 0 ]; then
		return 1
	fi

	return 0
}

get_root_dir()
{
	JAIL_DIR="`grep "^ *JAIL_HOME " $JAIL_SHELL_CONF | awk '{print $2}' 2>/dev/null`"
	
	if [ -z "$JAIL_DIR" ]; then
		return 1
	fi

	if [ ! -d "$JAIL_DIR" ]; then
		create_dir $JAIL_DIR 0755 root:root
		if [ $? -ne 0 ]; then
			echo "create $JAIL_DIR failed"
			return 1
		fi
	fi

	JAIL_DIR="`readlink -e $JAIL_DIR`"
	if [ ! -d "$JAIL_DIR" ]; then
		return 1
	fi

	if [ "$JAIL_DIR" = "/" ]; then
		return 1
	fi

	return 0;
}

link_cp()
{
	local src=$1
	local target=$2
	local link=$3 # 1 for link and copy, 0 for copy only

	if [ -z "$link" ]; then
		link=1
	fi

	if [ -d "$target" ]; then
		target="$target/`basename $src`"
	fi

	target_dir="`dirname $target | sed 's#/\{2,\}#/#g'`"
	if [ ! -d "$target_dir" ]; then
		echo "Directory $target_dir doesn't exist"
		return 1
	fi

	link_target_dir="`readlink -e $target_dir`"
	if [ "$target_dir" != "$link_target_dir" ]; then
		target="$JAIL_ROOT_DIR/$link_target_dir/`basename $target`"
	fi

	if [ $link -eq 1 ]; then
		ln -f $src $target 2>/dev/null
		if [ $? -eq 0 ]; then
			return 0
		fi
	fi

	cp -a $src $target
}

cp_lib()
{
	local LIBS_FILE="${ELF_FILE_LIST}.LIBS"
	local LIBS_ALL_FILE="${ELF_FILE_LIST}.LIBS_UNIQ"
	> $LIBS_FILE
	while read FILE
	do
		ldd $FILE >> $LIBS_FILE 2>/dev/null
	done < $ELF_FILE_LIST

	sort $LIBS_FILE | grep -v "not a dynamic" | grep -v "linux-vdso.so" | awk '{if(NF == 2){print $1}else{print $3}}' | uniq > $LIBS_ALL_FILE

	while read FILE
	do
		DIR="`dirname $FILE`"
		LIB_FILE="$FILE"
		if [ -h "$FILE" ]; then
			if [ ! -d "$JAIL_ROOT_DIR/$DIR" ]; then
				create_dir $JAIL_ROOT_DIR/$DIR 0755 root:root
				if [ $? -ne 0 ]; then
					echo "create directory failed."
					return 1
				fi
			fi
			link_cp $FILE $JAIL_ROOT_DIR/$DIR
			if [ $? -ne 0 ]; then
				rm -f $LIBS_ALL_FILE
				rm -f $LIBS_FILE
				return 1
			fi
			LIB_FILE="`readlink -e $FILE`"
		fi
		DIR="`dirname $LIB_FILE`"
		if [ ! -d "$JAIL_ROOT_DIR/$DIR" ]; then
			create_dir $JAIL_ROOT_DIR/$DIR 0755 root:root
			if [ $? -ne 0 ]; then
				echo "create directory failed."
				return 1
			fi
		fi
		link_cp $LIB_FILE $JAIL_ROOT_DIR/$DIR
		if [ $? -ne 0 ]; then
			rm -f $LIBS_ALL_FILE
			rm -f $LIBS_FILE
			return 1
		fi
	done < $LIBS_ALL_FILE

	rm -f $LIBS_ALL_FILE
	rm -f $LIBS_FILE
}

add_elf_file()
{
	echo $1 >> $ELF_FILE_LIST
}

dir()
{
	local userinfo="$3"
	if [ $# -ne 3 ]; then
		echo "arg number is invalid"
		return 1
	fi
	user=${userinfo##*:}
	group=${userinfo#*:}
	install -o $user -g $group -m $2 -d $JAIL_ROOT_DIR/$1  
}

file()
{
	local userinfo="$4"
	if [ $# -ne 4 ]; then
		echo "arg number is invalid"
		return 1
	fi

	if [ -h "$1" ]; then
		echo "source file is symbolic link"
		return 1
	fi

	user=${userinfo##*:}
	group=${userinfo#*:}
	link_cp $1 $JAIL_ROOT_DIR/$2 0
	if [ $? -ne 0 ]; then
		return 1
	fi
	chmod $3 $JAIL_ROOT_DIR/$2
	chown $user:$group $JAIL_ROOT_DIR/$2

	add_elf_file "$JAIL_ROOT_DIR/$2"
}

clink() 
{
	if [ $# -ne 2 ]; then
		echo "arg number is invalid"
		return 1
	fi

	if [ -h "$1" ]; then
		LINKED_FILE="`readlink -e $1`"
		link_cp $1 $JAIL_ROOT_DIR/$1
		if [ $? -ne 0 ]; then
			return 1
		fi
		clink $LINKED_FILE $LINKED_FILE
		return $?
	fi

	TARGET_DIR="`dirname $JAIL_ROOT_DIR/$2`"
	if [ ! -d "$TARGET_DIR" ]; then
		create_dir $TARGET_DIR 0755 root:root
		if [ $? -ne 0 ]; then 
			echo "create directory $TARGET_DIR failed."
			return 1
		fi
	fi
	link_cp $1 $JAIL_ROOT_DIR/$2
	if [ $? -ne 0 ]; then
		return 1
	fi

	add_elf_file "$JAIL_ROOT_DIR/$2"
}

hlink()
{
	if [ $# -ne 2 ]; then
		echo "arg number is invalid"
		return 1
	fi

	ln -f $1 $JAIL_ROOT_DIR/$2
	if [ $? -ne 0 ]; then
		return 1
	fi

	add_elf_file "$JAIL_ROOT_DIR/$2"
}

slink()
{
	if [ $# -ne 2 ]; then
		return 1
	fi

	ln -f -s $1 $JAIL_ROOT_DIR/$2
}

node()
{
	if [ $# -ne 6 ]; then
		return 1
	fi

	mknod $JAIL_ROOT_DIR/$1 $2 $3 $4 -m $5
	chown $6 $JAIL_ROOT_DIR/$1
}

cmd()
{
	local userinfo="$3"
	if [ $# -ne 3 ]; then
		echo "arg number is invalid"
		return 1
	fi

	user=${userinfo##*:}
	group=${userinfo#*:}

	if [ -z "$user" ] || [ -z "$group" ]; then
		echo "user or group is invalid."
		return 1
	fi

	ln -f -s $JAIL_CMD $JAIL_ROOT_DIR/$2
	if [ $? -ne 0 ]; then
		return 1
	fi

	LINK_NAME="`basename $2`"
	ln -f -s $1 $JAIL_COMMAND_PATH/$LINK_NAME
	if [ $? -ne 0 ]; then
		return 1
	fi

	echo "$LINK_NAME $user $group" >> $JAIL_COMMAND_PATH/$JAIL_COMMAND_LIST_FILE
}

bind()
{
	local src
	local dest
	local opts
	if [ $# -eq 3 ]; then
		src="$1"
		dest="$JAIL_ROOT_DIR/$2"
		opts="$3"
	elif [ $# -eq 2 ]; then
		src="$JAIL_ROOT_DIR/$1"
		dest="$JAIL_ROOT_DIR/$1"
		opts="$2"
	else
		echo "arg number is invalid"
		return 1
	fi

	if [ ! -z "$USER_NAME" ]; then
		#if user name is not empty and %src %dest include %u, replace %u to user name
		src="`echo $src | sed "s/%u/${USER_NAME}/g"`"
		dest="`echo $dest | sed "s/%u/${USER_NAME}/g"`"
	fi

	if [ ! -d "$src" ] || [ ! -d "$dest" ]; then
		echo "directory $src or $dest doesn't exist"
		return 1
	fi

	mount --bind $src $dest
	if [ $? -ne 0 ]; then
		return 1
	fi

	mount -o remount,$opts,bind $dest
	if [ $? -ne 0 ]; then
		umount $dest
		return 1
	fi
}

add_basic_files()
{
	if [ ! -f "$JAIL_ROOT_DIR/etc/passwd" ]; then
		echo "root:x:0:0:root:/root:/bin/bash" > $JAIL_ROOT_DIR/etc/passwd
		chmod 0644 $JAIL_ROOT_DIR/etc/passwd
		chown root:root $JAIL_ROOT_DIR/etc/passwd
	fi

	if [ ! -f "$JAIL_ROOT_DIR/etc/group" ]; then
		echo "root:x:0:" > $JAIL_ROOT_DIR/etc/group
		chmod 0644 $JAIL_ROOT_DIR/etc/group
		chown root:root $JAIL_ROOT_DIR/etc/group
	fi
}

setup_basic_files()
{
	if [ $cp_cmd -eq 1 ]; then
		clink $JAIL_SHELL_HOME/jail-cmd/jail-cmd $JAIL_CMD 
		if [ $? -ne 0 ]; then
			echo "copy jail-cmd failed."
			return 1
		fi
		clink $CMD_CONF $CMD_CONF
	fi

	cp_lib 
	if [ $? -ne 0 ]; then
		echo "copy lib failed."
		return 1
	fi

	add_basic_files
	if [ $? -ne 0 ]; then
		echo "add basic files failed."
		return 1
	fi
}

process_cfg()
{
	local jail_name=$1
	local jail_cfg=$2
	local act="$3"
	local cp_cmd=0
	
	if [ -z "$jail_name" ]; then
		return 1
	fi

	if [ ! -f "$jail_cfg" ]; then
		echo "jail config $jail_cfg is not exist."
		return 1
   	fi	

	JAIL_COMMAND_PATH=$COMMAND_PATH/$jail_name

	if [ ! -d "$JAIL_COMMAND_PATH" ]; then
		create_dir $JAIL_COMMAND_PATH 0755 root:root
		if [ $? -ne 0 ]; then
			echo "create jail dir $JAIL_COMMAND_PATH failed."
			return 1
		fi
	fi

	JAIL_ROOT_DIR="$JAIL_DIR/$jail_name"

	if [ "$act" = "setup" ]; then
		rm -f $JAIL_COMMAND_PATH/$JAIL_COMMAND_LIST_FILE
	fi

	LINE_NO=0
	while read CMD ARGS;
	do
		LINE_NO=$((LINE_NO+1))
		case "$CMD" in
		""|\#*)
			continue
			;;
		bind )
			if [ "$act" != "mount" ]; then
				continue;
			fi
			;;
		dir | file | hlink | slink | clink | node)
			if [ "$act" != "setup" ]; then
				continue;
			fi
			;;
		cmd)
			if [ "$act" != "setup" ]; then
				continue;
			fi
			cp_cmd=1
			;;
		*)
			echo "unknown command at line $LINE_NO: $CMD $ARGS"
			return 1
			;;
		esac

		$CMD $ARGS
		if [ $? -ne 0 ]; then
			echo "command failed at line $LINE_NO: $CMD $ARGS"
			return 1
		fi
	done < $jail_cfg

	if [ "$act" = "setup" ]; then
		setup_basic_files
		if [ $? -ne 0 ]; then
			return 1
		fi
	fi

	return 0
}

setup_jail()
{
	local jail_name=$1
	local jail_cfg=$2
	
	process_cfg $jail_name $jail_cfg "setup"
	if [ $? -ne 0 ]; then
		return 1;
	fi
}


clean_jail() 
{
	JAIL_NAME="$1"

	JAIL_PATH="$JAIL_DIR/$JAIL_NAME"

	JAIL_CFG="$CONF_PATH/${JAIL_NAME}.cfg"
	if [ ! -e $JAIL_CFG ]; then
		echo "jail $JAIL_NAME doesn't exist."
		return 1
	fi

	if [ ! -d "$JAIL_PATH" ]; then
		echo "jail $JAIL_NAME is not installed"
		return 1
	fi

	which fuser >/dev/null
	if [ $? -ne 0 ]; then
		printf "\033[31mneed fuser command to kill process, please install.\033[0m\n"
		echo "clean may not success."
	fi
	fuser -k $JAIL_PATH >/dev/null

	cat /proc/mounts | grep "/$JAIL_NAME[/| ]" | tac | awk '{print $2}' | uniq | xargs -i umount {} 
	if [ $? -ne 0 ]; then
		echo "umount directories failed."
		return 1
	fi

	return 0
}

clean_jails()
{
	local ret=0
	JAIL_NAME="$1"
	if [ "$JAIL_NAME" = "all" ]; then
		for JAIL_CFG in `ls $CONF_PATH/*.cfg 2>/dev/null`
		do
			JAIL_NAME="`basename $JAIL_CFG .cfg`"
			JAIL_PATH="$JAIL_DIR/$JAIL_NAME"
			if [ ! -d "$JAIL_PATH" ]; then
				continue
			fi
			clean_jail "$JAIL_NAME" "$JAIL_CFG"
			if [ $? -ne 0 ]; then
				echo "setup jail $JAIL_NAME failed."
				ret=1
			fi
		done

		return $ret
	fi

	JAIL_CFG="$CONF_PATH/${JAIL_NAME}.cfg"
	if [ ! -e $JAIL_CFG ]; then
		echo "jail $JAIL_NAME doesn't exist."
		return 1
	fi
	
	clean_jail "$JAIL_NAME" "$JAIL_CFG"
	if [ $? -ne 0 ]; then
		echo "clean jail $JAIL_NAME failed."
		ret=1
	fi

	return $ret
}

remove_jail()
{
	local ret=0
	JAIL_NAME="$1"
	
	JAIL_CFG="$CONF_PATH/${JAIL_NAME}.cfg"
	if [ ! -e $JAIL_CFG ]; then
		echo "jail $JAIL_NAME doesn't exist."
		return 1
	fi

	JAIL_PATH="$JAIL_DIR/$JAIL_NAME"
	if [ ! -d "$JAIL_PATH" ]; then
		echo "jail $JAIL_NAME is not installed."
		return 1
	fi

	clean_jail $JAIL_NAME

	rm -fr $JAIL_PATH

	return $?
}

install_jails()
{
	local ret=0
	JAIL_NAME="$1"
	if [ "$JAIL_NAME" = "all" ]; then
		for JAIL_CFG in `ls $CONF_PATH/*.cfg 2>/dev/null`
		do
			JAIL_NAME="`basename $JAIL_CFG .cfg`"
			setup_jail "$JAIL_NAME" "$JAIL_CFG"
			if [ $? -ne 0 ]; then
				echo "setup jail $JAIL_NAME failed."
				ret=1
			fi
		done

		return $ret
	fi

	JAIL_CFG="$CONF_PATH/${JAIL_NAME}.cfg"
	if [ ! -e $JAIL_CFG ]; then
		echo "jail $JAIL_NAME doesn't exist."
		return 1
	fi
	
	setup_jail "$JAIL_NAME" "$JAIL_CFG"
	if [ $? -ne 0 ]; then
		echo "setup jail $JAIL_NAME failed."
		ret=1
	fi

	return $ret
}

mount_jail()
{
	local ret=0
	JAIL_NAME="$1"	
	USER_NAME="$2"

	JAIL_CFG="$CONF_PATH/${JAIL_NAME}.cfg"
	if [ ! -e $JAIL_CFG ]; then
		echo "jail $JAIL_NAME doesn't exist."
		return 1
	fi

	JAIL_ROOT_DIR="$JAIL_DIR/$jail_name"
	if [ ! -d "$JAIL_ROOT_DIR" ]; then
		echo "jail $JAIL_NAME is not installed"
		return 1
	fi	

	process_cfg $JAIL_NAME $JAIL_CFG "mount"
	if [ $? -ne 0 ]; then
		return 1
	fi
	
	return 0

}

list_jail() 
{
	printf "%-24s%-24s%-24s\n" "[Jail]" "[Install]" "[Root Path]"
	for JAIL_CFG in `ls $CONF_PATH/*.cfg 2>/dev/null`
	do
		JAIL_NAME="`basename $JAIL_CFG .cfg`"
		if [ -d "$JAIL_DIR/$JAIL_NAME" ]; then
			printf "%-24s%-24s%-24s\n" "$JAIL_NAME" "Installed" "$JAIL_DIR/$JAIL_NAME"
		else
			printf "%-24s%-24s%-24s\n" "$JAIL_NAME" "Not Installed" "N/A"
		fi
	done	
}

main()
{
	local USER=""
	OPTS=`getopt -o h --long help,install:,remove:,clean:,user:,mount:,list \
		-n  "" -- "$@"`

	if [ $# -eq 0 ]; then
		showhelp
		return 0
	fi

	get_root_dir
	if [ $? -ne 0 ]; then
		echo "Please config JAIL_HOME path at file '$JAIL_SHELL_CONF'"
		return 1
	fi

	if [ $? != 0 ] ; then echo "Terminating..." >&2 ; exit 1 ; fi

	# Note the quotes around `$OPTS': they are essential!
	eval set -- "$OPTS"

	while true; do
		case "$1" in
		-h | --help )
			showhelp
			return $!
			shift ;;
		--install )
			install_jails $2
			return $?
			shift 2;;
		--remove )
			remove_jail $2
			return $?
			shift 2;;
		--clean )
			clean_jails $2
			return $?
			shift 2;;
		--user )
			USER="$2"
			shift 2;;
		--mount )
			mount_jail $2 $USER
			return $?
			shift 2;;
		--list )
			list_jail
			return 0
			;;
		-- ) shift; break ;;
		* ) break ;;
  		esac
	done
}

main $@
ret=$?
rm -fr $ELF_FILE_LIST
exit $ret
